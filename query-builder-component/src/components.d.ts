/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { QueryCondition } from "./components/query-builder/query-builder";
export { QueryCondition } from "./components/query-builder/query-builder";
export namespace Components {
    interface QueryBuilderComponent {
        /**
          * @default []
         */
        "availableFields": string[];
        /**
          * @default null
         */
        "jsonInput": object | any[];
        "localization": any;
        "redo": () => Promise<void>;
        "renderCondition": (condition: QueryCondition) => string;
        "undo": () => Promise<void>;
        /**
          * @default '{}'
         */
        "value": string;
    }
}
export interface QueryBuilderComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLQueryBuilderComponentElement;
}
declare global {
    interface HTMLQueryBuilderComponentElementEventMap {
        "queryChanged": string;
        "historyUpdated": { canUndo: boolean; canRedo: boolean; };
    }
    interface HTMLQueryBuilderComponentElement extends Components.QueryBuilderComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLQueryBuilderComponentElementEventMap>(type: K, listener: (this: HTMLQueryBuilderComponentElement, ev: QueryBuilderComponentCustomEvent<HTMLQueryBuilderComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLQueryBuilderComponentElementEventMap>(type: K, listener: (this: HTMLQueryBuilderComponentElement, ev: QueryBuilderComponentCustomEvent<HTMLQueryBuilderComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLQueryBuilderComponentElement: {
        prototype: HTMLQueryBuilderComponentElement;
        new (): HTMLQueryBuilderComponentElement;
    };
    interface HTMLElementTagNameMap {
        "query-builder-component": HTMLQueryBuilderComponentElement;
    }
}
declare namespace LocalJSX {
    interface QueryBuilderComponent {
        /**
          * @default []
         */
        "availableFields"?: string[];
        /**
          * @default null
         */
        "jsonInput"?: object | any[];
        "localization"?: any;
        "onHistoryUpdated"?: (event: QueryBuilderComponentCustomEvent<{ canUndo: boolean; canRedo: boolean; }>) => void;
        "onQueryChanged"?: (event: QueryBuilderComponentCustomEvent<string>) => void;
        "renderCondition"?: (condition: QueryCondition) => string;
        /**
          * @default '{}'
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "query-builder-component": QueryBuilderComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "query-builder-component": LocalJSX.QueryBuilderComponent & JSXBase.HTMLAttributes<HTMLQueryBuilderComponentElement>;
        }
    }
}
